{"version":3,"sources":["ng://ngx-tags-input/lib/ngx-tags-input.component.ts","ng://ngx-tags-input/lib/ngx-tags-input.module.ts"],"names":["noop","CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","NgxTagsInputComponent","multi","prototype","getPlaceholder","this","tags","length","placeholder","tagsChanged","type","tag","onChangeCallback","onTagsChanged","emit","change","maximumOfTagsReached","onMaxTagsReached","removeLastTag","tagInput","removeLastOnBackspace","value","removeTag","addTag","trim","_a","displayField","addPredefinedTag","push","tagToRemove","isDeleteable","filter","maxTags","deleteable","canDeleteTags","typeaheadOnSelect","e","item","selected","typeaheadOnNoMatch","onNoOptionsMatch","writeValue","registerOnChange","fn","registerOnTouched","onTouchedCallback","Component","args","selector","template","providers","Input","Output","canAddTags","options","minLengthBeforeOptions","scrollableOptions","scrollableOptionsInView","EventEmitter","NgxTagsInputModule","NgModule","declarations","imports","FormsModule","CommonModule","TypeaheadModule","forRoot","exports"],"mappings":"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","sourcesContent":["import { Component, forwardRef, Input, Output, EventEmitter } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\r\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead/public_api';\r\n\r\nconst noop = () => {};\r\n\r\nconst TAGS_INPUT_TEMPLATE = `\r\n    <div class=\"tags-input\">\r\n        <span class=\"tags-input__tag label label-primary badge badge-primary\" *ngFor=\"let tag of tags\">\r\n            {{tag[displayField]}}\r\n            <span *ngIf=\"isDeleteable(tag)\" role=\"button\" class=\"tags-input__tag-remove-btn\" (click)=\"removeTag(tag)\" (touch)=\"removeTag(tag)\">\r\n                <span aria-hidden=\"true\">&times;</span>\r\n                <span class=\"sr-only\">Close</span>\r\n            </span>\r\n        </span>\r\n        <input\r\n            *ngIf=\"options === null; else withTypeahead\" \r\n            class=\"tags-input__input-field\" \r\n            type=\"text\" \r\n            [placeholder]=\"getPlaceholder()\"\r\n            name=\"tags\"\r\n            (keyup.enter)=\"addTag(tagInput)\" (keydown.backspace)=\"removeLastTag(tagInput)\"\r\n            [disabled]=\"!canAddTags || maximumOfTagsReached()\"\r\n            [hidden]=\"!canAddTags || maximumOfTagsReached()\"\r\n            #tagInput />\r\n        <ng-template #withTypeahead>\r\n          <input\r\n            *ngIf=\"options !== null\" \r\n            class=\"tags-input__input-field\" \r\n            type=\"text\" \r\n            [placeholder]=\"getPlaceholder()\"\r\n            name=\"tags\"\r\n            (keydown.backspace)=\"removeLastTag(tagInput)\"\r\n            [(ngModel)]=\"selected\" \r\n            [typeahead]=\"options\"\r\n            [typeaheadOptionField]=\"displayField\"\r\n            (typeaheadOnSelect)=\"typeaheadOnSelect($event)\"\r\n            (typeaheadNoResults)=\"typeaheadOnNoMatch($event)\"\r\n            [typeaheadMinLength]=\"minLengthBeforeOptions\"\r\n            [typeaheadScrollable]=\"scrollableOptions\"\r\n            [typeaheadLatinize]=\"true\"\r\n            [typeaheadOptionsInScrollableView]=\"scrollableOptionsInView\"\r\n            [disabled]=\"!canAddTags || maximumOfTagsReached()\"\r\n            [hidden]=\"!canAddTags || maximumOfTagsReached()\"\r\n            #tagInput />\r\n        </ng-template>\r\n    </div>\r\n`;\r\n\r\nconst TAGS_INPUT_STYLE = `\r\n    :host {\r\n        overflow: auto;\r\n        white-space: nowrap;\r\n    }\r\n\r\n    .tags-input {\r\n        align-items: center;\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n    }\r\n\r\n    .tags-input__tag {\r\n        display: inline-block;\r\n        margin-bottom: 2px;\r\n        margin-right: 5px;\r\n        padding-right: 0.3em;\r\n    }\r\n\r\n    .tags-input__tag-remove-btn {\r\n        cursor: pointer;\r\n        display: inline-block;\r\n        font-size: 12px;\r\n        margin: -3px 0 0 3px;\r\n        padding: 0;\r\n        vertical-align: top;\r\n    }\r\n\r\n    .tags-input__input-field {\r\n        border: none;\r\n        flex-grow: 1;\r\n        outline: none;\r\n    }\r\n`;\r\n\r\nconst CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => NgxTagsInputComponent),\r\n  multi: true\r\n};\r\n\r\nexport interface TagsChangedEvent {\r\n  change: string,\r\n  tag: any\r\n}\r\n\r\n@Component({\r\n  selector: 'ngx-tags-input',\r\n  template: TAGS_INPUT_TEMPLATE,\r\n  styles: [TAGS_INPUT_STYLE],\r\n  providers: [CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR]\r\n})\r\nexport class NgxTagsInputComponent implements ControlValueAccessor {\r\n  selected:string = '';\r\n  public tags: Array<any> = [];\r\n  private onTouchedCallback: () => void = noop;\r\n  private onChangeCallback: (_: any) => void = noop;\r\n\r\n  @Input() maxTags: number;\r\n  @Input() removeLastOnBackspace: boolean = false;\r\n  @Input() canDeleteTags: boolean = true;\r\n  @Input() canAddTags: boolean = true;\r\n  @Input() placeholder: string = '';\r\n  @Input() options: any = null;\r\n  @Input() displayField: string = 'displayValue';\r\n  @Input() minLengthBeforeOptions: number = 1;\r\n  @Input() scrollableOptions: boolean = false;\r\n  @Input() scrollableOptionsInView: number = 5;\r\n  @Output() onTagsChanged: EventEmitter<TagsChangedEvent> = new EventEmitter();\r\n  @Output() onMaxTagsReached: EventEmitter<void> = new EventEmitter();\r\n  @Output() onNoOptionsMatch: EventEmitter<boolean> = new EventEmitter();\r\n\r\n  getPlaceholder(): string {\r\n    if(this.tags && this.tags.length > 0){\r\n        return '';\r\n    }\r\n    return this.placeholder;\r\n  }\r\n\r\n  private tagsChanged(type: string, tag: any): void {\r\n      this.onChangeCallback(this.tags);\r\n      this.onTagsChanged.emit({\r\n          change: type,\r\n          tag: tag\r\n      });\r\n      if(this.maximumOfTagsReached()){\r\n          this.onMaxTagsReached.emit();\r\n      }\r\n  }\r\n\r\n  removeLastTag(tagInput: HTMLInputElement): void {\r\n      if(!this.removeLastOnBackspace || !this.tags.length) {\r\n          return;\r\n      }\r\n\r\n      if (tagInput.value === ''){\r\n          this.removeTag(this.tags[this.tags.length-1]);\r\n      }\r\n  }\r\n\r\n  addTag(tagInput: HTMLInputElement): void {\r\n      if (tagInput.value.trim() !== ''){\r\n          let tag = {\r\n              [this.displayField]: tagInput.value\r\n          };\r\n          this.addPredefinedTag(tag);\r\n      }\r\n      tagInput.value = '';\r\n  }\r\n\r\n  private addPredefinedTag(tag: Object): void {\r\n      if (!this.maximumOfTagsReached()){\r\n          this.tags.push(tag);\r\n          this.tagsChanged('add', tag);\r\n      }\r\n  }\r\n\r\n  removeTag(tagToRemove: any): void {\r\n      if(!this.isDeleteable(tagToRemove)){\r\n          return;\r\n      }\r\n      this.tags = this.tags.filter(tag => tagToRemove !== tag);\r\n      this.tagsChanged('remove', tagToRemove);\r\n  }\r\n\r\n  maximumOfTagsReached(): boolean {\r\n      return typeof this.maxTags !== 'undefined' && this.tags && this.tags.length>=this.maxTags;\r\n  }\r\n\r\n  isDeleteable(tag: any) {\r\n      if(typeof tag.deleteable !== \"undefined\" && !tag.deleteable){\r\n          return false;\r\n      }\r\n      return this.canDeleteTags;\r\n  }\r\n\r\n  typeaheadOnSelect(e:TypeaheadMatch):void {\r\n      if(typeof e.item === 'string'){\r\n          this.addPredefinedTag({\r\n              [this.displayField]: e.value\r\n          });\r\n      }else {\r\n          this.addPredefinedTag(e.item);\r\n      }\r\n      this.selected = '';\r\n  }\r\n\r\n  typeaheadOnNoMatch(e:any):void {\r\n      if(typeof this.onNoOptionsMatch !== 'undefined'){\r\n          this.onNoOptionsMatch.emit(e)\r\n      }\r\n  }\r\n\r\n  writeValue(value: any) {\r\n      if (value !== this.tags) {\r\n          this.tags = value;\r\n      }\r\n  }\r\n\r\n  registerOnChange(fn: any) {\r\n      this.onChangeCallback = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any) {\r\n      this.onTouchedCallback = fn;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { NgxTagsInputComponent } from './ngx-tags-input.component';\r\nimport { TypeaheadModule } from 'ngx-bootstrap/typeahead'\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  declarations: [NgxTagsInputComponent],\r\n  imports: [\r\n    FormsModule,\r\n    CommonModule,\r\n    TypeaheadModule.forRoot()\r\n  ],\r\n  exports: [NgxTagsInputComponent]\r\n})\r\nexport class NgxTagsInputModule { }\r\n"]}